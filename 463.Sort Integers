//选择排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            int k = i;
            for (int j = i + 1; j < A.length; j++) {        //找到最小值的下标
                if (A[j] < A[k]) {
                    k = j;
                }
            }
            int temp = A[i];                                //交换到最前
            A[i] = A[k];
            A[k] = temp;
        }
    }
}

//选择排序优化
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1 - i; i++) {
            int min = i;
            int max = A.length - 1 - i;
            for (int j = i; j < A.length - i; j++) {        //找出最大值和最小值的下标
                if (A[j] < A[min]) {
                    min = j;
                }
                if (A[j] > A[max]) {
                    max = j;
                }
            }
            if (min != i) {                                 //最小值换到前面
                int temp = A[i];
                A[i] = A[min];
                A[min] = temp;
                if (max == i) {                             //最大值的下标与最小值要换的下标相同
                    max = min;
                }
            }
            if (max != A.length - 1 - i) {                  //最大值换到后面
                int temp = A[A.length - 1 - i];
                A[A.length - 1 - i] = A[max];
                A[max] = temp;
            }
        }
    }
}

//自写的冒泡排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            for (int j = i; j < A.length; j++) {            //遇到比前面小的数就执行交换
                if (A[i] > A[j]) {
                    int temp = A[i];
                    A[i] = A[j];
                    A[j] = temp;
                }
            }
        }
    }
}

//冒泡排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            for (int j = 0; j < A.length - 1 - i; j++) {    //相邻的两个数后面比前面小就交换
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                }
            } 
        }
    }
}

//冒泡排序（外层优化）
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            boolean flag = true;                            //设置一个变量flag
            for (int j = 0; j < A.length - 1 - i; j++) {
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                    flag = false;                           //有发生交换改变flag
                }
            }
            if (flag) {                                     //没有发生交换说明以有序则退出循环
                break;
            }
        }
    }
}

//冒泡排序（内层优化）
public class Solution {
    public void sortIntegers(int[] A) {
        int k = A.length - 1;
        int pos = 0;                                        //设置一个变量pos
        for (int i = 0; i < A.length - 1; i++) {
            boolean flag = true;
            for (int j = 0; j < k; j++) {
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                    flag = false;
                    pos = j;                                //记录最后有发生交换的位置
                }
            }
            k = pos;                                        //下次循环到最后发生交换的位置
            if (flag) {
                break;
            }
        }
    }
}
