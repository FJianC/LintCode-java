//自写的排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            for (int j = i; j < A.length; j++) {            //遇到比前面小的数就执行交换
                if (A[i] > A[j]) {
                    int temp = A[i];
                    A[i] = A[j];
                    A[j] = temp;
                }
            }
        }
    }
}

//选择排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            int k = i;
            for (int j = i + 1; j < A.length; j++) {        //找到最小值的下标
                if (A[j] < A[k]) {
                    k = j;
                }
            }
            int temp = A[i];                                //交换到最前
            A[i] = A[k];
            A[k] = temp;
        }
    }
}

//选择排序优化
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1 - i; i++) {
            int min = i;
            int max = A.length - 1 - i;
            for (int j = i; j < A.length - i; j++) {        //找出最大值和最小值的下标
                if (A[j] < A[min]) {
                    min = j;
                }
                if (A[j] > A[max]) {
                    max = j;
                }
            }
            if (min != i) {                                 //最小值换到前面
                int temp = A[i];
                A[i] = A[min];
                A[min] = temp;
                if (max == i) {                             //最大值的下标与最小值要换的下标相同
                    max = min;
                }
            }
            if (max != A.length - 1 - i) {                  //最大值换到后面
                int temp = A[A.length - 1 - i];
                A[A.length - 1 - i] = A[max];
                A[max] = temp;
            }
        }
    }
}

//冒泡排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            for (int j = 0; j < A.length - 1 - i; j++) {    //相邻的两个数后面比前面小就交换
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                }
            } 
        }
    }
}

//冒泡排序（外层优化）
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            boolean flag = true;                            //设置一个变量flag
            for (int j = 0; j < A.length - 1 - i; j++) {
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                    flag = false;                           //有发生交换改变flag
                }
            }
            if (flag) {                                     //没有发生交换说明以有序则退出循环
                break;
            }
        }
    }
}

//冒泡排序（内层优化）
public class Solution {
    public void sortIntegers(int[] A) {
        int k = A.length - 1;
        int pos = 0;                                        //设置一个变量pos
        for (int i = 0; i < A.length - 1; i++) {
            boolean flag = true;
            for (int j = 0; j < k; j++) {
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                    flag = false;
                    pos = j;                                //记录最后有发生交换的位置
                }
            }
            k = pos;                                        //下次循环到最后发生交换的位置
            if (flag) {
                break;
            }
        }
    }
}

//直接插入排序（后往前查找插入位置）
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 1; i < A.length; i++) {
            if (A[i] < A[i - 1]) {                          //找到无序的第一个数的下标变量i
                int temp = A[i];
                int j = i - 1;                              //变量j在i后一位开始比较并挪移
                while (j >= 0 && A[j] > temp) {             //挪移
                    A[j + 1] = A[j];
                    j--;
                }
                A[j + 1] = temp;                            //插入
            }
        }
    }
}

//直接插入排序（前往后查找插入位置）
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 1; i < A.length; i++) {
            if (A[i] < A[i - 1]) {                          //找到无序的第一个数的下标变量i
                int temp = A[i];
                int j = 0;
                while (j >= 0 && A[j] < temp) {             //从0开始找有序中比变量i小的数的下标
                    j++;
                }
                for (int k = i; k > j; k--) {               //挪移
                    A[k] = A[k - 1];
                }
                A[j] = temp;                                //插入
            }
        }
    }
}

//折半（二分）插入排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int i = 1; i < A.length; i++) {
            int low = 0;
            int high = i - 1;
            int temp = A[i];
            while (low <= high) {                           //第i位置的数与中间数比较，直到找到适合的位置
                int mid = (low + high) / 2;
                if (temp < A[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
            for (int j = i - 1; j >= low; j--) {            //挪移
                A[j + 1] = A[j];
            }
            A[low] = temp;                                  //插入
        }
    }
}

//希尔插入排序
public class Solution {
    public void sortIntegers(int[] A) {
        for (int gap = A.length / 2; gap > 0; gap /= 2) {   //循环将数组除以2进行分组直到组数为0
            for (int i = gap; i < A.length; i++) {          //对每小组进行直接插入排序
                if (A[i] < A[i - gap]) {
                    int temp = A[i];
                    int j = i - gap;                        //小组元素间距为小组的数量
                    while (j >= 0 && A[j] > temp) {         //挪移
                        A[j + gap] = A[j];
                        j -= gap;
                    }
                    A[j + gap] = temp;                      //插入
                }
            }
        }
    }
}

//归并排序（递归）
public class Solution {
    public void sortIntegers(int[] A) {
        mergeSort(A, 0, A.length - 1);
    }
    public void mergeSort(int[] A, int low, int high) {     //递归
        int mid = (low + high) / 2;                         //将一个数组分割为只包含一个元素的数组
        if (low < high) {                                   //再进行merge，合并数组
            mergeSort(A, low, mid);
            mergeSort(A, mid + 1, high);
            merge(A, low, mid, high);
        }
    }
    public void merge(int[] A, int low, int mid, int high) {//合并两个有序数组
        int l = low;                                        //第一个数组的第一个下标为low，最后一个下标为mid
        int h = mid + 1;                                    //第二个数组第一个下标为mid+1，最后一个下标为high
        int k = 0;
        int[] temp = new int[high - low + 1];               //创建临时数组temp
        while (l <= mid && h <= high) {
            if (A[l] <= A[h]) {                             //两个数组比较后，符合条件的元素复制入临时数组
                temp[k] = A[l];
                l++;
                k++;
            } else {
                temp[k] = A[h];
                h++;
                k++;
            }
        }
        while (l <= mid) {                                  //第一个数组还存在元素，全部复制到临时数组
            temp[k] = A[l];
            l++;
            k++;
        }
        while (h <= high) {                                 //第二个数组还存在元素，全部复制到临时数组
            temp[k] = A[h];
            h++;
            k++;
        }
        k = 0;
        for (int i = low; i <= high; i++) {                 //临时数组复制到原数组
            A[i] = temp[k];
            k++;
        }
    }
}

//归并排序（非递归）
