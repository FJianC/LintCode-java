public class Solution {
    public int findPosition(int[] nums, int target) {       //数组为有序数组
        int left = 0;                                       //查找数组的左边界 left
        int right = nums.length - 1;                        //查找数组的右边界 right
        int mid;                                            //中间值的位置 mid
        while (left <= right) {                             //当左边界与右边界重合即查找结束
            mid = (left + right) / 2;
            if (target > nums[mid]) {                       //若目标比中间值大，即目标在数组右部分
                left = mid + 1;                             //左边界变为 mid + 1 （中间位置的下一位）
            } else if (target < nums[mid]) {                //若目标比中间值小，即目标在数组左部分
                right = mid - 1;                            //右边界变为 mid - 1 （中间数的上一位）
            } else {
                return mid;                                 //若目标与中间值相等，即返回中间值的位置
            }
        }
        return -1;                                          //没有找到与目标，则返回 -1
    }
}
